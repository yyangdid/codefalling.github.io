#+TITLE: [Leetcode-Javascript]Find Peak Element
#+DATE: <2015-11-01 Sun 12:22>
#+TAGS: leetcode
#+LAYOUT: post
#+CATEGORIES: LEETCODE
* 原题
#+BEGIN_QUOTE
A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.
#+END_QUOTE

就是找出局部最大值并返回其下标（返回任意一个就好）。

假设最左和最右为无穷小，相邻元素都不相等。

* 分析
这道题的难度是 =Medium= ，但是看起来似乎没有什么难度，因为两端都为无穷小，所以刚开始函数一定是递增的，一旦某个点小于上一个点（递减），则这个点的前一个点必为局部最大。

#+BEGIN_HTML
<!--more-->
#+END_HTML

* 代码
#+BEGIN_SRC js
/**
 * @param {number[]} nums
 * @return {number}
 */
var findPeakElement = function(nums) {
    for(var i = 1;i<nums.length;i++){
        if(nums[i] < nums[i-1]){
            return i-1;
        }
    }
    return nums.length - 1;
};
#+END_SRC

居然直接就 Accepted 了。。我以为至少会时间不足什么的。。

* 改进
虽然 ac 了但是不作出点改进是在对不起 Medium 的难度（十分怀疑是不是评错了）。之前给出的算法最坏情况的复杂度是 =O(N)= ，其实可以用二分法写出一个复杂度 =O(lgn)= 的，思路也很简单。

取中间元素，如果

+ 该元素大于右侧，则该元素的左侧（包括该元素）一定存在局部最大
+ 该元素小于右侧，则该元素右侧（不包含该元素）一定存在局部最大

#+BEGIN_SRC js
/**
 * @param {number[]} nums
 * @return {number}
 */
var findPeakElement = function(nums) {
    var left = 0;
    var right = nums.length - 1;
    while(left < right){
        var mid = Math.floor((right + left)/2);
        if(nums[mid] < nums[mid + 1]){
            left = mid + 1;
        }else{
            right = mid;
        }
    }
    return left;
};
#+END_SRC

再次 ac，过程中 leetcode 挂了一次-。-
