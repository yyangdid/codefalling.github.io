#+TITLE: [Leetcode-Javascript]Decode Ways
#+DATE: <2015-11-06 Fri 12:30>
#+TAGS: leetcode
#+LAYOUT: post
#+CATEGORIES: LEETCODE


* 原题

A message containing letters from A-Z is being encoded to numbers using the following mapping:

#+BEGIN_EXAMPLE
'A' -> 1
'B' -> 2
...
'Z' -> 26
#+END_EXAMPLE

Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message =12=, it could be decoded as =AB= (1 2) or =L= (12).

The number of ways decoding =12= is 2.

** 题意

给个数字组成的字符串，求出解码的方法总数。

* 分析

乍一看思路和 [[http://codefalling.com/2015/11/05/Leetcode-Javascript-Generate-Parentheses/][{Leetcode-Javascript}Generate Parentheses | M-x codefalling]] 很类似，直接递归，每次的选择只有 =解码一个数字= 和 =解码两个数字= ，然后成功完成解码的数量就是解码方法的数量。

解码两个数字的条件也很简单，就是当前位置的数 >0 <3，两个数 < 27 即可。

#+BEGIN_HTML
<!--more-->
#+END_HTML

* 递归

#+BEGIN_SRC js
  /**
   ,* @param {string} s
   ,* @return {number}
   ,*/

  var iter = function(s, index){
    if(index == s.length){
      // 当前方案顺利完成
      iter_r = 1;
    }else if(index > s.length){
      iter_r = 0;
    }else{

      var current = parseInt(s[index]);
      var two = parseInt(s[index] + s[index + 1]);
      if(current > 0 && two < 27){ // 可以 decoode 两个数字
        iter_r = iter(s, index + 1) + iter(s, index + 2);
      }else if(current > 0){
        iter_r = iter(s, index + 1);
      }else{
        iter_r = 0;
      }
    }
    return iter_r;
  }

  var numDecodings = function(s) {
    if(s.length === 0) return 0;
    return iter(s, 0);
  };
#+END_SRC

输入很大时 =Time Limit Exceeded=

* 改进
分析一下就可以看到，之所以效率低是因为递归的过程中很多调用是重复了很多次的（例如 =iter(s, 2)= 这个调用的值是确定的，但实际上却计算了很多遍）。只要加一个记忆表记下调用的结果就可以。

#+BEGIN_SRC js
  /**
   ,* @param {string} s
   ,* @return {number}
   ,*/

  var iter_r = []

  var iter = function(s, index){
    if(iter_r[index]){
      return iter_r[index];
    }
    if(index == s.length){
      // 当前方案顺利完成
      iter_r[index] = 1;
    }else if(index > s.length){
      iter_r[index] = 0;
    }else{

      var current = parseInt(s[index]);
      var two = parseInt(s[index] + s[index + 1]);
      if(current > 0 && two < 27){ // 可以 decoode 两个数字
        iter_r[index] = iter(s, index + 1) + iter(s, index + 2);
      }else if(current > 0){
        iter_r[index] = iter(s, index + 1);
      }else{
        iter_r[index] = 0;
      }
    }
    return iter_r[index];
  }

  var numDecodings = function(s) {
    iter_r = [];
    if(s.length === 0) return 0;
    return iter(s, 0);
  };
#+END_SRC
