#+TITLE: Minimum Path Sum
#+DATE: 2015-12-20
#+LAYOUT: post
#+TAGS: leetcode,javascript

* 题目

#+BEGIN_EXAMPLE
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
#+END_EXAMPLE

** 大意

在一个非负数的矩阵中，找出由左上角移动到右下角的和最小的路径，并返回和。（只能向右或向下移动）。

#+BEGIN_HTML
<!--more-->
#+END_HTML
* 分析

#+BEGIN_EXAMPLE
1 2 3 2
4 5 6 4
3 1 3 5
#+END_EXAMPLE

参照这个矩阵，我们用 $d_{i,j}$ 表示 ~mxn~ 矩阵中从左上角到第 i 行第 j 列的最短路径长度， $n_{i,j}$ 表示其数值。则

+ $d_{1,1} = n_{1,1} = 1$
+ $d_{i,j} = min( d_{i-1,j}, d_{i,j-1} + n_{i,j} )$ 从上来或从左来，其中 $i,j \not= 1$
+ $d_{1,j} = d_{1,j-1} + n_{1,j}$ ，第一排
+ $d_{i,1} = d_{i-1,1} + n_{i,1}$ ，第一列

列出状态转移式后思路就无比清晰了，从 $d_{1,1}$ 计算到 $d_{m,n}$ 即可。

* 代码

#+BEGIN_SRC js
  /**
   ,* @param {number[][]} grid
   ,* @return {number}
   ,*/

  var minPathSum = function(grid) {
    var d = [];
    m = grid.length;
    n = grid[0].length;
    for(var k = 0; k < m; k++){
      d[k] = [];
    }
    for(var i = 0; i < m; i++){
      for(var j = 0; j < n; j++){
        if(i === 0 && j === 0){
          d[i][j] = grid[i][j];
        }else if(i === 0){
          d[i][j] = d[i][j-1] + grid[i][j];
        }else if(j === 0){
          d[i][j] = d[i-1][j] + grid[i][j];
        }else{
          d[i][j] = Math.min(d[i][j-1] , d[i-1][j]) + grid[i][j];
        }
      }
    }
    return d[m-1][n-1];
  };
#+END_SRC


* 递归

其实也可以用递归来实现，加上记忆表就可以解决性能问题。

#+BEGIN_SRC js
  /**
   ,* @param {number[][]} grid
   ,* @return {number}
   ,*/

  var memory;
  function d(i, j, grid){
    if(memory[[i,j]]){
      return memory[[i,j]];
    }
    var result;
    if(i === 0 && j === 0){
      result = grid[i][j];
    }else if(i === 0){
      result = d(i,j-1,grid) + grid[i][j];
    }else if(j === 0){
      result = d(i-1,j,grid) + grid[i][j];
    }else{
      result = Math.min(d(i,j-1,grid) , d(i-1,j,grid)) + grid[i][j];
    }
    memory[[i,j]] = result;
    return result;
  }
  var minPathSum = function(grid) {
    memory = {}; // 清除 leetcode 的缓存
    return d(grid.length - 1, grid[0].length - 1, grid);
  };
#+END_SRC
