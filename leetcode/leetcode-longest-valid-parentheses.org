#+TITLE: Longest Valid Parentheses
#+DATE: 2015-12-23
#+LAYOUT: post
#+TAGS:leetcode,javascript

* 题目

#+BEGIN_QUOTE
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
#+END_QUOTE

** 题意

给一个由'('和')'组成的字符串，找出字符串中尽可能长的有效括号匹配的长度。例如 ")()(()()))"返回结果应该是 8 [()(()())]。
#+BEGIN_HTML
<!--more-->
#+END_HTML
* 分析
本题可以从动态规划的思路出发，用 $d_i$ 表示到第 $i$ 个字符为结尾的字符的 "longest valid parentheses"。$n_i$ 表示第 $i$ 个字符，则有

+ $d_1 = 0$
+ 当 $n_i == '('$ 时 $d_i = 0$
+ 当 $n_i == ')'$ 时
  + 若 $n_{i-1} == '('$，$d_i = d_{i-2} + 2$ // 直接闭合，等于目前已有的有效字符+2
  + 若 $n_{i-1} == ')'$, 且 $s_{i-1}-d_{i-1} == '('$ ，则 $d_i = d_{i-1} + 2$ // 和之前的闭合，例如(())

* 代码

#+BEGIN_SRC js
  /**
   ,* @param {string} s
   ,* @return {number}
   ,*/
  var longestValidParentheses = function(s) {
    if(s.length === 0) return 0;
    var d = [];
    d[0] = 0;
    for(var i=1;i<s.length;i++){
      if(s[i] == '('){
        d[i] = 0;
      }else if(s[i] == ')'){
        if(s[i-1] == '('){
          var before = 0;
          if(d[i-2]){
            before = d[i-2];
          }
          d[i] = before + 2;
        }else{
          // also a ')',and d[i-1] will be a length
          if(s[i - 1 - d[i-1]] == '(')
            d[i] = d[i-1] + 2;
          else
            d[i] = 0;
        }
        // had a valid before
        if(d[i - d[i]]){
          d[i] += d[i - d[i]];
        }
      }
    }

    return Math.max.apply(Math, d);
  };
#+END_SRC
