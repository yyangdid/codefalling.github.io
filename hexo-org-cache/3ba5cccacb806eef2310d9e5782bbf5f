{"md5":"fefd45b710f94e135bcc779e13144260","content":"\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 题目</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 原题</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<blockquote>\n<p>\nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n</p>\n\n<p>\nFor example,\nGiven [3,2,1,5,6,4] and k = 2, return 5.\n</p>\n\n<p>\nNote:\nYou may assume k is always valid, 1 ≤ k ≤ array's length.\n</p>\n</blockquote>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 大意</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n在无序数组中找出第 k 大的数字。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 分析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n最简单的方法自然是直接排序好，然后取第 k 个数，这样效率自然不会太高。由于我们只是需要找到第 k 大的数字，所以不需要对所有的数字进行排序，我们可以用类似快速排序的算法找到这个数。\n</p>\n\n<p>\n首先选取一个数，将比其小的放到左边，大的放到右边。记此时该数是第 x 个。\n</p>\n\n<ul class=\"org-ul\">\n<li><code>x == k</code> 时他就是第 k 大的数字\n</li>\n<li><code>x < k</code> 时第 k 大的数字在右边\n</li>\n<li><code>x > k</code> 时第 k 大的数字在左边\n</li>\n</ul>\n</div>\n</div>\n"}
