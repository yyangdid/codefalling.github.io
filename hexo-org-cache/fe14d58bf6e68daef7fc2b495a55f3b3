{"md5":"57d3a16b117a7b3fa00520d80e04708d","content":"\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 原题</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n</p>\n\n<p>\nFor example, given n = 3, a solution set is:\n</p>\n\n<p>\n\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"\n</p>\n</div>\n\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 翻译</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n给出 n 组括号的所有组合。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 分析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n乍一看还是有难度的，把图画出来会清晰的多。\n</p>\n\n<pre class=\"example\">\n     +--- (( ---- \n     |\n( ---+          +--- ()(\n     |          |       \n     +--- () ---+       \n                |       \n                +--- ())X\n</pre>\n\n<p>\n很明显寻找组合的过程就像遍历一棵树，用递归可以很轻松的完成。\n</p>\n\n<p>\n例如寻找 n 组括号的组合，即一共放置 n 个坐括号和 n 个右括号。每到一个节点，都有两种选择，放置左括号或右括号（右括号不能放的比左括号多，否则一定无法完成匹配）。放置括号的顺序和调用递归函数的顺序一致（即和回溯方向相反）。\n</p>\n\n<!--more-->\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 代码</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * @param {number} n</span><br><span class=\"line\"> * @return {string[]}</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right, current</span>)</span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(left === <span class=\"number\">0</span> && right === <span class=\"number\">0</span>){</span><br><span class=\"line\">    result.push(current);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(left > <span class=\"number\">0</span>){</span><br><span class=\"line\">      iter(left - <span class=\"number\">1</span>, right, current + <span class=\"string\">'('</span>); <span class=\"comment\">// 放左括号</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(right > <span class=\"number\">0</span> && right > left){</span><br><span class=\"line\">      iter(left, right-<span class=\"number\">1</span>, current + <span class=\"string\">')'</span>); <span class=\"comment\">// 放右括号</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> generateParenthesis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>{</span><br><span class=\"line\">  result = [];  <span class=\"comment\">// 这一行是必须的，在 Leetcode 里 js 的 test case 居然共用全局变量</span></span><br><span class=\"line\">  iter(n, n, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n"}
