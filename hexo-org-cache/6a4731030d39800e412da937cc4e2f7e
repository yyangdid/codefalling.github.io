{"md5":"5b92cdb8a00b30eeae4415e2a1db7183","content":"\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> hexo-front-matter</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n<code>hexo</code> 就不需要再介绍了，是个很有名的静态博客生成器。和很多静态博客生成器一样，hexo 选择 <code>front-matter</code> 来读取文章的元数据，例如标题，日期等，究其原因是因为 <code>markdown</code> 没有办法表示这些信息。我们经常可以在各种文章的头部看到它们\n</p>\n\n<p>\n虽然这种方式有所争议（因为这样就不是一个标准的 md 文件了），但是对于 md 没有更好的选择，相关的文档和讨论在 <a href=\"https://hexo.io/docs/front-matter.html\">Front-matter | Hexo</a> 可以看到。所以终究 hexo 直接使用了这种方式。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> orgmode 不需要 front-matter</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n<code>orgmode</code> 不同于追求简洁的 <code>markdown</code> ，本身就有表示文章元信息的方式，一个典型的 <code>orgmode</code> 文章可以这样表示\n</p>\n\n<pre class=\"example\">\n#+TITLE: hexo：摆脱 hexo-front-matter\n#+DATE: <2015-11-16 Mon 22:12>\n#+LAYOUT: post\n#+TAGS: emacs,hexo,org-mode,hexo-renderer-org\n#+CATEGORIES: EMACS\n文章内容\n</pre>\n\n<p>\n但是 hexo 从一开始就没考虑过这个问题，所以并没有提供改变读取元信息的接口，但是我研究了一段时间后发现一些 hack 可以做到。\n</p>\n\n<!--more-->\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> hack</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> hexo.extend.filter.register</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n<code>hexo</code> 提供了插件的 API 可以在渲染前/后再对结果做一些处理。\n</p>\n\n<p>\n通过\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">'before_post_render'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>{</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n把 <code>data</code> 打印出来可以看到 <code>title</code> <code>tags</code> <code>content</code> ，可以通过 <code>content</code> 读取元信息，然后再写回 <code>data</code> 里。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> DateTime</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n<code>Orgmode</code> 中使用 <code>org-time-stamp</code> 来插入时间戳，结果类似 <code><2015-11-16 Mon 22:40></code> （似乎可以配置成其他格式和中文等），只要把非数字和 <code>:-</code> 替换成空格就能被 <code>Date.parse</code> 直接识别。\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(org_time.replace(<span class=\"regexp\">/[^0-9:-]/g</span>, <span class=\"string\">' '</span>)))</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n除此之外， <code>hexo</code> 需要一个 <code>format</code> 函数来调用<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>。\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Date</span>.prototype.format) {</span><br><span class=\"line\">  <span class=\"built_in\">Date</span>.prototype.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fmt</span>) </span>{ <span class=\"comment\">// Hexo need this</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = {</span><br><span class=\"line\">      <span class=\"string\">\"M+\"</span>: <span class=\"keyword\">this</span>.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"d+\"</span>: <span class=\"keyword\">this</span>.getDate(),</span><br><span class=\"line\">      <span class=\"string\">\"h+\"</span>: <span class=\"keyword\">this</span>.getHours(),</span><br><span class=\"line\">      <span class=\"string\">\"m+\"</span>: <span class=\"keyword\">this</span>.getMinutes(),</span><br><span class=\"line\">      <span class=\"string\">\"s+\"</span>: <span class=\"keyword\">this</span>.getSeconds(),</span><br><span class=\"line\">      <span class=\"string\">\"q+\"</span>: <span class=\"built_in\">Math</span>.floor((<span class=\"keyword\">this</span>.getMonth() + <span class=\"number\">3</span>) / <span class=\"number\">3</span>),</span><br><span class=\"line\">      <span class=\"string\">\"S\"</span>: <span class=\"keyword\">this</span>.getMilliseconds()</span><br><span class=\"line\">    };</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"keyword\">this</span>.getFullYear() + <span class=\"string\">\"\"</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(\"</span> + k + <span class=\"string\">\")\"</span>).test(fmt)) fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length == <span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">\"00\"</span> + o[k]).substr((<span class=\"string\">\"\"</span> + o[k]).length)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt;</span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> tags 和 categories</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\n这是最头疼的两个属性了，它们不能直接设置，但是我在 <a href=\"https://github.com/hexojs/hexo/blob/b4172d6c15fc9782b6b522f65e9c202ff548dcc7/lib/models/post.js\">hexo/post.js at b4172d6c15fc9782b6b522f65e9c202ff548dcc7 · hexojs/hexo</a> 中找到了一些信息。我们可以用类似 <code>data.setTags(['tag1', 'tag2'])</code> 这样的方法改变文章的 tag。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 问题</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\ntag 的统计数据比预期大很多，似乎是重复的会叠加次数，原因不详。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 实现</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n目前在 <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">CodeFalling/hexo-renderer-org</a> 中已经实现了这个方法，以后可以直接用 <code>orgmode</code> 的写法，摆脱作为权益之计的 <code>front-matter</code> 。\n</p>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>hexo 表示时间的类型不是 Date，而是 <a href=\"https://github.com/hexojs/hexo/blob/534102e6992bfb4df975a724846993617edcf988/lib/models/types/moment.js\">hexo/moment.js at 534102e6992bfb4df975a724846993617edcf988 · hexojs/hexo</a></p></div>\n\n\n</div>\n</div>"}
