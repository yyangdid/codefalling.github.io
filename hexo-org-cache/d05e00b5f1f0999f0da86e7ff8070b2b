{"md5":"639d43bb601cfe40d90c5f80764df014","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> cleanjs</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n这是我最近新开的坑，前段时间搞了好几个实用型但是没什么太多技术含量的项目，于是现在也想搞一个没什么卵用但是比较高端的东西。 <b><b>实现 js 的一个子集</b></b> 。先用 js 写一个解释器（或者代码生成器？），最终目标是尝试用这个解释器来完成自举（所以我会尽量不使用不打算实现的 js 特性）。\n</p>\n\n<p>\n这样设计有很多好处，例如尝试自举时我不需要重头再写一遍（如果有那么一天的话），我可以依旧在 emacs 的 <code>js-mode</code> 下写 <code>cleanjs</code> 的代码而不需要自己造一个 mode。当然缺点也是非常明显的，例如造一个 cleanjs->js 的 compiler 实在是太没有什么卵用了。。所以也许我会考虑生成其他语言（例如 c）的代码。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 词法分析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nTokenizer 也是经常见到的一个梗，相传经常有程序员以此约战 Github 之巅（雾）：<a href=\"http://www.zhihu.com/question/30746665\">会写 Parser、Tokenizer 是什么水平？ - 知乎</a> 。\n</p>\n\n<p>\n好了不扯淡，词法分析是语言实现的第一步，也是最容易实现的，也是我唯一有信心实现能实现的（咳）。要做的不复杂，只要将给的代码中相应的 token 抽取出来，例如给一段 <code>cleanjs</code> 的代码：\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"hahaha\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i++; i<<span class=\"number\">10</span>){</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name + i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n应该得到一个 token 流：\n</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">src</th>\n<th scope=\"col\" class=\"left\">token</th>\n<th scope=\"col\" class=\"left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">var</td>\n<td class=\"left\"><code>{type: 'keyword', value: 'var'}</code></td>\n<td class=\"left\">关键字(if else while for var function return null true false)</td>\n</tr>\n\n<tr>\n<td class=\"left\">=</td>\n<td class=\"left\"><code>{type: 'op', value: '='}</code></td>\n<td class=\"left\">运算符(+-*/.,)</td>\n</tr>\n\n<tr>\n<td class=\"left\">\"hahaha\\n\"</td>\n<td class=\"left\"><code>{type: 'string', value: 'hahaha\\n'}</code></td>\n<td class=\"left\">字符串</td>\n</tr>\n\n<tr>\n<td class=\"left\">;</td>\n<td class=\"left\"><code>{type: 'punc', value: ';'}</code></td>\n<td class=\"left\">标点（:;(){}）</td>\n</tr>\n\n<tr>\n<td class=\"left\">for</td>\n<td class=\"left\"><code>{type: 'keyword', value: 'for'}</code></td>\n<td class=\"left\">关键字</td>\n</tr>\n\n<tr>\n<td class=\"left\">…</td>\n<td class=\"left\">…</td>\n<td class=\"left\"> </td>\n</tr>\n</tbody>\n</table>\n\n<!--more-->\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> InputStream</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n在构造一个词法分析流之前，我们先构建一个输入流来隐藏一些细节，例如应该怎么换行，目前的位置等等\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">InputStream</span>(<span class=\"params\">input</span>)</span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _pos = <span class=\"number\">0</span>, _line = <span class=\"number\">0</span>, _col = <span class=\"number\">0</span>, _input = input;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    next: next,</span><br><span class=\"line\">    peek: peek,</span><br><span class=\"line\">    eof: eof,</span><br><span class=\"line\">    throwerr: throwerr,</span><br><span class=\"line\">    lookup_next: lookup_next,</span><br><span class=\"line\">    get_line: get_line,</span><br><span class=\"line\">    get_col: get_col</span><br><span class=\"line\">  };</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_line</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _line;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_col</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _col;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = _input.charAt(_pos++);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch == <span class=\"string\">'\\n'</span>){</span><br><span class=\"line\">      _line ++;</span><br><span class=\"line\">      _col = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      _col ++;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookup_next</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = _input.charAt(_pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ch == <span class=\"string\">''</span>){</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _input.charAt(_pos);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eof</span>(<span class=\"params\"></span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> peek() == <span class=\"string\">''</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throwerr</span>(<span class=\"params\">msg</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`[<span class=\"subst\">${_line}</span>:<span class=\"subst\">${_col}</span>]<span class=\"subst\">${msg}</span>`</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n利用函数闭包可以轻松构出封装的效果，外部能够访问的只有 return 里的接口，使用 <code>InputStream()</code> 就可以创建一个实例。\n</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">函数</th>\n<th scope=\"col\" class=\"left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">next()</td>\n<td class=\"left\">返回当前位置的字符，并向后移动，封装了换行的逻辑（即读到 \\n 时行号列号会自动变化）</td>\n</tr>\n\n<tr>\n<td class=\"left\">peek()</td>\n<td class=\"left\">返回当前位置的字符</td>\n</tr>\n\n<tr>\n<td class=\"left\">eof()</td>\n<td class=\"left\">检测是否到达末尾</td>\n</tr>\n\n<tr>\n<td class=\"left\">throwerr()</td>\n<td class=\"left\">抛出异常，并且输出相应的行号列号</td>\n</tr>\n\n<tr>\n<td class=\"left\">lookup<sub>next</sub>()</td>\n<td class=\"left\">返回下一个字符，并不移动位置</td>\n</tr>\n</tbody>\n</table>\n\n<p>\n本来设计得当的话 <code>lookup_next()</code> 这个方法本来是可以不需要的，但是既然是实现 js 的子集就避免不了。例如你在读进一个 <code>/</code> 时，必须知道下一个字符是 <code>/</code> 还是 <code>*</code> 或者其他的字符，才能确切的判断它是块注释，行注释还是除法运算符。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> TokenStream</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n<code>TokenStream</code> 其实和 <code>InputStream</code> 非常的相似，区别在于它的输入是 <code>InputStream</code> ,而输出的是 Token。\n</p>\n\n<p>\n<code>TokenStream</code> 的核心在于读取下一个 <code>token</code> , 流程大概是\n</p>\n\n<ul class=\"org-ul\">\n<li>去除所有的制表符号\n</li>\n<li>如果到达末尾，则返回 null\n</li>\n<li>如果以 <code>\\\\</code> 或者 <code>\\*</code> 则跳过注释并读取下一个 token\n</li>\n<li>如果以 <code>双引号</code> 或者 <code>单引号</code> 开头的，则读取字符串\n</li>\n<li>。。。等等等\n</li>\n<li>如果上面都不满足，则报错\n</li>\n</ul>\n\n\n<p>\n实现大概如下\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read_next</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  read_while(is_whitespace);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> info = create_info();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_input_stream.eof()) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ch = _input_stream.peek();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is_comment_start(ch)) {</span><br><span class=\"line\">    skip_comment();</span><br><span class=\"line\">    result = read_next();</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_op_char(ch)) result = read_op();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_string_start(ch)) result = read_string();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_id_start(ch)) result = read_id_or_keyword();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_punc(ch)) result = read_punc();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_number_start(ch)) result = read_number();</span><br><span class=\"line\">  <span class=\"keyword\">else</span> _input_stream.throwerr(<span class=\"string\">`Can't handle character: <span class=\"subst\">${ch}</span>`</span>);</span><br><span class=\"line\">  result.info = info;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n大部分的 <code>readxxx</code> 都容易实现， <code>string</code> 稍微麻烦一点要支持转义和多种字符串\n</p>\n\n<p>\n因为 js 支持三种字符串的写法，同时要识别转义字符\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'this is a string with \\''</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">\"this is a string with \\\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">`this is a string with \\``</span>;</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n大致的实现如下\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read_escaped</span>(<span class=\"params\">end</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> escaped = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">  _input_stream.next();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!_input_stream.eof()) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ch = _input_stream.next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (escaped) {</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(ch == <span class=\"string\">'n'</span>){</span><br><span class=\"line\">\tstr += <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">      }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">\tstr += ch;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      escaped = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">\"\\\\\"</span>) {</span><br><span class=\"line\">      escaped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == end) {</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      str += ch;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read_string</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">var</span> type;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> begin = _input_stream.peek();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(begin == <span class=\"string\">'`'</span>)</span><br><span class=\"line\">    type = <span class=\"string\">'es6_string'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    type = <span class=\"string\">'string'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> {</span><br><span class=\"line\">    type: type,</span><br><span class=\"line\">    value: read_escaped(begin) <span class=\"comment\">// begin with ' or \" or `</span></span><br><span class=\"line\">  };</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n这里实现的并不完整，只支持几个简单的转义字符，由于具体的代码比较长，可以直接见：<a href=\"https://github.com/CodeFalling/cleanjs/blob/master/src/lex.js\">cleanjs/lex.js at master · CodeFalling/cleanjs</a> 。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 运行效果</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n<a href=\"http://7xnx2x.com1.z0.glb.clouddn.com/cleanjs_tokenizer_sample.png\">例子</a>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n本文大量参（zhao）考（ban）了 <a href=\"http://lisperator.net/pltut/\">How to implement a programming language (tutorial for beginners)</a> 的内容，这是一个讲如何用 js 实现编程语言的网站，当然和我的目标不同，它是实现一个新的语言而不是 js 的子集。\n</p>\n</div>\n</div>\n"}
