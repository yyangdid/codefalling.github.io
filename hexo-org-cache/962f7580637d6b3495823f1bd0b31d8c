{"md5":"ce25cc177c256925dda16822a86785bb","content":"\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 背景</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n<code>vi-mode</code> 是一种高效的编辑方式，但是最令人头疼的莫过于在普通模式下输入命令的时候却被输入法挡住，对于我这种经常忘记切输入法的人来说非常痛苦。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"fcitx-vim-for-OS-X/preview.png\" alt=\"命令被输入法堵住\">\n</p>\n</div>\n\n<p>\n为了解决这种问题，很早以前就有了 <a href=\"https://github.com/vim-scripts/fcitx.vim\">vim-scripts/fcitx.vim</a> （for Vim）和 <a href=\"https://github.com/cute-jumper/fcitx.el\">cute-jumper/fcitx.el</a> (for Emacs)。利用插件和 <code>fcitx</code> 进行沟通，让输入法随着用户的需要自动改变。\n</p>\n\n<p>\n但是 fcitx 是 Linux only 的，OS X 下无法使用。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> fcitx-remote</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n<code>fcitx-remote</code> 是 fcitx 提供的一个命令行小工具，用于在命令行下控制输入以及获取输入法状态。早期版本的 <code>fcitx.vim</code> 和 <code>fcitx.el</code> 通过这个程序来和 <code>fcitx</code> 进行交互。于是我收到启发，如果在 OS X 下实现一个 <code>fcitx-remote</code> ，和 <code>fcitx</code> 保持一致的使用方法， <code>fcitx.vim</code> 和 <code>fcitx.el</code> 就可以在 OS X 直接使用了。所以有了这个项目：<a href=\"https://github.com/CodeFalling/fcitx-remote-for-osx\">CodeFalling/fcitx-remote-for-osx</a>\n</p>\n\n<!--more-->\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 安装</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> homebrew</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install fcitx-remote-for-osx --with-input-method=baidu-pinyin</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n<code>--with-input-method=baidu-pinyin</code> 表示你使用的是百度拼音输入法\n</p>\n\n<p>\n你可以使用 <code>brew info fcitx-remote-for-osx</code> 来查看支持的更多选项。\n</p>\n\n<pre class=\"example\">\n--with-input-method=\n  Select input method: baidu-pinyin(default), baidu-wubi, sogou-pinyin, qq-wubi, squirrel-rime, osx-pinyin\n</pre>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> 手工安装</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/CodeFalling/fcitx-remote-for-osx\ncd fcitx-remote-for-osx\nxcodebuild GCC_PREPROCESSOR_DEFINITIONS='$GCC_PREPROCESSOR_DEFINITIONS CHINNESE_KEYBOARD_LAYOUT=@\\\"com.baidu.inputmethod.BaiduIM.pinyin\\\"' install</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n编译完成后可执行文件会被安装到 <code>/usr/local/bin/fcitx-remote</code>\n</p>\n\n<p>\n构建指令看起来比较长，是因为要定制所用的中文输入法，对应输入法的 <code>imname</code> 可以在 <a href=\"https://github.com/CodeFalling/fcitx-remote-for-osx#install\">Github</a> 看到，如果表里没有你用的输入法，你可以先安装了 <code>fcitx-remote</code> ，然后用 <code>fcitx-remote -n</code> 来获取当前的输入法名，欢迎以任何形式向我补充。\n</p>\n\n<p>\n我使用的是百度拼音，如果你使用其他输入法，编译参数要做响应的修改。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> 二进制文件</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\n如果你不愿意安装 XCode，也可以去 <a href=\"https://github.com/CodeFalling/fcitx-remote-for-osx/releases/tag/0.0.1\">Release Prebuild binary here · CodeFalling/fcitx-remote-for-osx</a> 下载编译好的二进制文件，然后将其复制到 <code>/usr/local/bin/</code>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Emacs</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n由于我自己是 emacs 用户所以先提 emacs， <code>fcitx-remote</code> 可以和 <a href=\"https://github.com/cute-jumper/fcitx.el\">cute-jumper/fcitx.el</a> 配合使用， <del>但是不要使用 <code>(fcitx-prefix-keys-turn-on)</code> 和 <code>(fcitx-prefix-keys-setup)</code> （即不要直接使用 <code>fcitx-default-setup</code> 什么的），会导致 emacs 假死，原因不详。我自己使用的配置是</del>\n</p>\n\n<p>\n之前使用的时候会卡死，后来发现是因为我用的 <code>fish-shell</code> ，在 emacs 的配置里加上一句 <code>(setq shell-file-name \"bash\")</code> ，问题就完美解决了。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> Vim</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n本来以为 vim 是使用不了这个小工具的，但是后来发现老版本的 <code>fcitx.vim</code> 同样使用 <code>fcitx-remote</code> ，然后简单的修改下（不然会很卡），放在了 <a href=\"https://github.com/CodeFalling/fcitx-vim-osx\">CodeFalling/fcitx-vim-osx</a> 。可以直接通过 <code>vundle</code> 安装，这个版本也可以直接在 Linux 下使用。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 反馈</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n使用中碰到任何问题，欢迎去 <a href=\"https://github.com/CodeFalling/fcitx-remote-for-osx\">CodeFalling/fcitx-remote-for-osx</a> 开 issue 或者直接评论。\n</p>\n</div>\n</div>\n"}
