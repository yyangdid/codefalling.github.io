{"md5":"38ae43933918fde3c3c10f6ba8841ac3","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 原题</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nA message containing letters from A-Z is being encoded to numbers using the following mapping:\n</p>\n\n<pre class=\"example\">\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n</pre>\n\n<p>\nGiven an encoded message containing digits, determine the total number of ways to decode it.\n</p>\n\n<p>\nFor example,\nGiven encoded message <code>12</code>, it could be decoded as <code>AB</code> (1 2) or <code>L</code> (12).\n</p>\n\n<p>\nThe number of ways decoding <code>12</code> is 2.\n</p>\n</div>\n\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 题意</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n给个数字组成的字符串，求出解码的方法总数。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 分析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n乍一看思路和 <a href=\"http://codefalling.com/2015/11/05/Leetcode-Javascript-Generate-Parentheses/\">{Leetcode-Javascript}Generate Parentheses | M-x codefalling</a> 很类似，直接递归，每次的选择只有 <code>解码一个数字</code> 和 <code>解码两个数字</code> ，然后成功完成解码的数量就是解码方法的数量。\n</p>\n\n<p>\n解码两个数字的条件也很简单，就是当前位置的数 >0 <3，两个数 < 27 即可。\n</p>\n\n<!--more-->\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 递归</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * @param {string} s</span><br><span class=\"line\"> * @return {number}</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, index</span>)</span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index == s.length){</span><br><span class=\"line\">    <span class=\"comment\">// 当前方案顺利完成</span></span><br><span class=\"line\">    iter_r = <span class=\"number\">1</span>;</span><br><span class=\"line\">  }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index > s.length){</span><br><span class=\"line\">    iter_r = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"built_in\">parseInt</span>(s[index]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two = <span class=\"built_in\">parseInt</span>(s[index] + s[index + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current > <span class=\"number\">0</span> && two < <span class=\"number\">27</span>){ <span class=\"comment\">// 可以 decoode 两个数字</span></span><br><span class=\"line\">      iter_r = iter(s, index + <span class=\"number\">1</span>) + iter(s, index + <span class=\"number\">2</span>);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(current > <span class=\"number\">0</span>){</span><br><span class=\"line\">      iter_r = iter(s, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      iter_r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iter_r;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numDecodings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iter(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n输入很大时 <code>Time Limit Exceeded</code>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 改进</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n分析一下就可以看到，之所以效率低是因为递归的过程中很多调用是重复了很多次的（例如 <code>iter(s, 2)</code> 这个调用的值是确定的，但实际上却计算了很多遍）。只要加一个记忆表记下调用的结果就可以。\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * @param {string} s</span><br><span class=\"line\"> * @return {number}</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iter_r = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, index</span>)</span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(iter_r[index]){</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter_r[index];</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index == s.length){</span><br><span class=\"line\">    <span class=\"comment\">// 当前方案顺利完成</span></span><br><span class=\"line\">    iter_r[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index > s.length){</span><br><span class=\"line\">    iter_r[index] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"built_in\">parseInt</span>(s[index]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> two = <span class=\"built_in\">parseInt</span>(s[index] + s[index + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current > <span class=\"number\">0</span> && two < <span class=\"number\">27</span>){ <span class=\"comment\">// 可以 decoode 两个数字</span></span><br><span class=\"line\">      iter_r[index] = iter(s, index + <span class=\"number\">1</span>) + iter(s, index + <span class=\"number\">2</span>);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(current > <span class=\"number\">0</span>){</span><br><span class=\"line\">      iter_r[index] = iter(s, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      iter_r[index] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iter_r[index];</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numDecodings = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>{</span><br><span class=\"line\">  iter_r = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(s.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iter(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n"}
