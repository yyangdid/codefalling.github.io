{"md5":"d30eff53bfa84b237b36867d2ae79ccb","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 背景</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n我最近刚刚开始折腾个人博客，因为对 <code>Node.js</code> 很感兴趣，加上一些很好看的主题，所以选择了 <code>hexo</code> 。而本人又是一名 <code>emacs</code> 粉丝，于是折腾了一个使用 <code>emacs+orgmode+hexo</code> 的解决方案。可以在 hexo 中像使用 markdown 一样使用 orgmode。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Orgmode</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 介绍</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n<a href=\"http://orgmode.org/\">Orgmode</a> 是 Emacs 下一个强大的插件，更加确切的说，它是一种强大的标记式语言（类似 Markdown)，正如官网的介绍\n</p>\n\n<blockquote>\n<p>\n\n</p>\n\n\n<p>\nOrg mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.\n</p>\n</blockquote>\n\n<p>\nOrgmode 可以用来做笔记，做 GTD，写作等等，而这一切都基于纯文本（这点和 Markdown 一致）。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> 为什么使用 Orgmode</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n提到标记式语言，大家可能第一反应就是 Markdown，的确，Markdown 得益于社区的发展和本身的轻便，在程序员中几乎无人不知无人不晓，那么我们为什么选择 Orgmode 呢\n</p>\n</div>\n<div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">\n<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> 和 Emacs 契合</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-1\">\n<p>\nOrgmode 是很多人选择 Emacs 的理由，它的理念和 Emacs 也很相近，强大而自由。在 Emacs 中你可以获得 Orgmode 最好的体验，定制自己的函数，控制如何截图并插入图片等，当然 Vim 和 Sublime Text 也有其相应的实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2-2\" class=\"outline-4\">\n<h4 id=\"sec-2-2-2\"><span class=\"section-number-4\">2.2.2</span> 比 Markdown 更强大和统一</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-2\">\n<p>\nOrgmode 得益于设计的足够强大（标准的 Markdown 很多功能确实，现在流行的大多为各种方言），和较为中心化的开发，具有十分完备的功能和统一的实现。诸如链接到某个文件的某一行这样的功能用 Orgmode 也可以实现。\n</p>\n\n<!--more-->\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Hexo</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n<a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个基于 Node.js 的静态博客生成器，以速度快著称，且有很多清新大方的主题使用。\n</p>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> hexo-renderer-org</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\nHexo 默认只支持 Markdown，但是其灵活的插件系统允许我们自己编写 renderer 以支持不同的文件类型，于是我写了 [[<a href=\"https://github.com/Code[=hexo-renderer-org\">https://github.com/Code[=hexo-renderer-org</a>=]] 以支持 orgmode（感谢 <a href=\"https://github.com/geekplux\">geekplux</a> 的多次帮助，其实大部分代码由他重写过）。\n</p>\n</div>\n<div id=\"outline-container-sec-3-1-1\" class=\"outline-4\">\n<h4 id=\"sec-3-1-1\"><span class=\"section-number-4\">3.1.1</span> 使用</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-1\">\n<p>\n<code>hexo-renderer-org</code> 使用起来很简单，只需要在博客所在的目录执行 \n</p>\n\n<p>\n<code>npm install --save hexo-renderer-org</code> \n</p>\n\n<p>\n就可以直接在 <code>_post</code> 下面写 org 文件了。不过由于 hexo 的实现方式，一些元信息（标题，时间，tag 等）都在文件开头的 <code>yml</code> 读取，而不是通过 <code>#+TITLE:Balabal</code> 读取（谁让 Markdown 根本不支持 title tag 之类的呢）。\n</p>\n\n<p>\n文件的内容如下模板\n</p>\n<pre class=\"example\">\ntitle: Title here\ndate: 2015-10-25 19:25:01\ntags:\n- emacs\n- hexo\n---\n* Orgmode\n** Why orgmode\n#+BEGIN_SRC js\n  consol.log(\"hello\");\n#+END_SRC\n\n我编不下去了。。\n</pre>\n<p>\n然后就可以像在 hexo 中使用 Markdown 一样使用 <code>hexo d -g</code> 来生成部署你的博客了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-2\" class=\"outline-4\">\n<h4 id=\"sec-3-1-2\"><span class=\"section-number-4\">3.1.2</span> 配置</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-2\">\n<p>\n<code>hexo-renderer-org</code> 目前支持的配置选项还不多（只有一个），在 hexo 的 <code>_config.yml</code> 中可以配置\n</p>\n<pre class=\"example\">\norg:\n  toc: false\n</pre>\n<p>\n<code>toc</code> 代表是否开启 <code>table-of-content</code> ，由于大部分 hexo 主题其实自带了 toc 功能（前端实现，例如我现在用的 <code>hexo-theme-next</code> ），所以默认此功能是关闭的。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-3\" class=\"outline-4\">\n<h4 id=\"sec-3-1-3\"><span class=\"section-number-4\">3.1.3</span> Read more</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-3\">\n<p>\nHexo 使用直接插入 html <code><!--more--></code> 的方法来告诉首页在此处加入 <code>Read more=按钮。在 orgmode 中使用 =#+BEGIN_HTML</code> 和 <code>#+END_HTML</code> 来插入 html。所以只要写\n</p>\n<pre class=\"example\">\n#+BEGIN_HTML\n<!--more-->\n#+END_HTML\n</pre>\n<p>\n即可在此位置放置一个 <code>Read more</code> 按钮。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-4\" class=\"outline-4\">\n<h4 id=\"sec-3-1-4\"><span class=\"section-number-4\">3.1.4</span> Github Pages</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-4\">\n<p>\nHexo 可以很方便的托管在 Github Pages 上，方便管理，同时又有免费无限的流量。具体的教程见 <a href=\"https://www.google.com/search?q=hexo+github+page\">Google</a>。\n</p>\n\n<p>\n当然你也可以选择将博客托管在自己的 VPS 或者任何其他支持静态 httpd 的地方。之前尝试过直接在 VPS 跑 <code>hexo server -p 80</code> 然后通过 TRAMP 直接远程修改文件（听起来很优雅对不对，本地只需要有一个可以远程编辑的 emacs 即可），但由于一些<a href=\"https://github.com/hexojs/hexo/issues/1175#issuecomment-151845634\">比较奇葩的 bug</a> 最终放弃。\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Emacs</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n提到 orgmode 必然就离不开 emacs，emacs 是一个强大的编辑器（操作系统），你可以自由定制大量的功能。例如添加一个函数直接完成 hexo 发布所需要的所有操作，快速截图直接插入到 org-mode，直接插入复制的图片地址。这些都不复杂，你可以轻松把 emacs 打造成你想要的样子。\n</p>\n</div>\n\n<div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 一键发布</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\n我是将博客托管在 <a href=\"https://github.com/CodeFalling/codefalling.github.io\">Github</a> 的，每次完成修改后都要将 <code>source</code> 分支 <code>commit</code> <code>push</code> ，然后再用 <code>hexo d -g</code> 来把生成的结果部署到 <code>master</code> 分支。非常不便，所以写了段简单的脚本，在 emacs 中可以直接调用。\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">(setq hexo-dir \"~/blog\")\n(defun codefalling-hexo-publish (commit-msg)\n  \"git add . & git commit & git push & hexo d -g\"\n  (interactive \"sInput commit message:\")\n  (async-shell-command (format \"cd %s ;git add . ;git commit -m \\\"%s\\\" ;git push ;hexo d -g\"\n\t\t\t hexo-dir\n\t\t\t commit-msg)))</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n<code>M-x codefalling-hexo-publish</code> 然后输入 <code>commit message</code> ，后面的操作都将由脚本完成。\n</p>\n\n<p>\nps：其实这段就是调用 shell 脚本，应该有更 elisp 的写法（只是我不太会-.-）\n</p>\n\n<p>\n之前用的 <code>shell-command</code> 改成 <code>async-shell-command</code> ，可以即时看到执行的反馈，会好很多。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> 直接截图插入</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">(defun codefalling-org-screenshot ()\n    \"Take a screenshot into a time stamped unique-named file in the\nsame ./{buffer name} for hexo,OS X only\"\n    (interactive)\n    (setq filename\n\t  (concat\n\t   (make-temp-name\n\t    (concat\n\t    (file-name-sans-extension (buffer-name))\n\t\t    \"/\"\n\t\t    (format-time-string \"%Y%m%d_%H%M%S_\")) ) \".png\"))\n    (call-process-shell-command \"screencapture\" nil nil nil \"-s -t png\" filename)\n    (insert (concat \"[[file:\" (file-name-nondirectory filename) \"]]\"))\n)</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n这段代码可以在 emacs 中调用 OS X 自带的截图程序，按照 hexo 的要求将其保存到和文章同名的文件夹下。（这个设定其实很不科学，因为发布后图片和发布前图片的相对路径并不一致，所以在 emacs orgmode 里显示不出来。同理 markdown 编辑器里也会显示不出来，这也是我为什么更倾向于图床的原因）。\n</p>\n\n<p>\n要使用的同学也可以自己加以修改，例如获取用户输入给图片加上标题什么的。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4-3\" class=\"outline-3\">\n<h3 id=\"sec-4-3\"><span class=\"section-number-3\">4.3</span> 显示网络图片</h3>\n<div class=\"outline-text-3\" id=\"text-4-3\">\n<p>\n上面说到我更倾向于图床，但是在 emacs 里是不显示在线的图片的，<a href=\"https://github.com/lujun9972\">Darkson</a> 写了一个支持显示网络图片的 <a href=\"https://github.com/lujun9972/uimage\">uimage</a> 。可以通过 melpa 安装，然后在需要的时候 <code>M-x turn-on-uimage-mode</code> 即可。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"use-orgmode-with-hexo/preview.jpg\" alt=\"caption\">\n</p>\n</div>\n\n<p>\n<del>同时对于使用 Chrome 的同学，推荐 <a href=\"https://chrome.google.com/webstore/detail/fdfdnfpdplfbbnemmmoklbfjbhecpnhf\">微博图床</a> 这个插件，非常好用。</del>\n</p>\n\n<p>\n对于微博图床还是不太放心，于是改用了七牛云来做图床，流量不大时免费完全够用。同样有个 <a href=\"https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc\">Chrome 插件</a> 推荐。不如上面的好用，但是相对还是要放心不少。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4-4\" class=\"outline-3\">\n<h3 id=\"sec-4-4\"><span class=\"section-number-3\">4.4</span> 在 Emacs 里直接新建文章并且打开</h3>\n<div class=\"outline-text-3\" id=\"text-4-4\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">defun</span> codefalling/hexo-org-new-open-post <span class=\"list\">(<span class=\"keyword\">post-name</span>)</span></span><br><span class=\"line\">  <span class=\"string\">\"create a hexo org post\"</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">interactive</span> <span class=\"string\">\"sInput post name:\"</span>)</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">find-file</span> <span class=\"list\">(<span class=\"keyword\">format</span> <span class=\"string\">\"%s/source/_posts/%s.org\"</span> hexo-dir post-name)</span>)</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">insert</span> <span class=\"list\">(<span class=\"keyword\">format</span> <span class=\"string\">\"title: '%s'</span><br><span class=\"line\">date: %s</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---\"</span>  post-name <span class=\"list\">(<span class=\"keyword\">format-time-string</span> <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4-5\" class=\"outline-3\">\n<h3 id=\"sec-4-5\"><span class=\"section-number-3\">4.5</span> 使用 ido 直接打开 source 文件夹</h3>\n<div class=\"outline-text-3\" id=\"text-4-5\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">defun</span> codefalling/hexo-org-source <span class=\"list\">()</span></span><br><span class=\"line\">  <span class=\"string\">\"use dired open hexo source dir\"</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">interactive</span>)</span></span><br><span class=\"line\">  <span class=\"list\">(<span class=\"keyword\">ido-find-file-in-dir</span> <span class=\"list\">(<span class=\"keyword\">format</span> <span class=\"string\">\"%s/source/\"</span> hexo-dir)</span>)</span></span><br><span class=\"line\">  )</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 更多功能</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\nEmacs Lisp 还能做很多有趣的事情，可以参考 <a href=\"http://emacswiki.org/emacs/OrgMode\">Emacs Wiki</a>，或者按照自己的需求在 Google 上寻找。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 更新</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n新版本的 hexo-renderer-org 已经做出了不少改动，配置需要做出一些改变，具体参见<a href=\"http://codefalling.com/2015/11/10/new-version-of-hexo-renderer-org/\">完整特性的 hexo-renderer-org | M-x codefalling</a>\n</p>\n</div>\n</div>\n"}
